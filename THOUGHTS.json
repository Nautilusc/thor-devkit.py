{
    "foo": 123,
    "bar": "0x12345678",
    "baz": [
        { 
            "x": "0x11", 
            "y": 1234 
        },
        { 
            "x": "0x12", 
            "y": 5678 
        },
        789,
        [
            123,
            {
                "a": 1
            }
        ]
    ],

    "a": {
        "b": {
            "c": [
                789,
                { 
                    "d": 10
                }
            ]
        }
    }
}

serialize
==========

dict wrapper
------
keys_list: ["foo", "bar", "baz", ..., "a" ]
codecs_list: [encoder, encoder, list_wrapper, dict_wrapper]

pack(obj, wrapper) ->

return_list = []
for (key, codec) in zip(keys_list, codecs_list):
    if type(codec) == encoder:
        return_list.append( encoder.serialize(obj[key]) )
    
    if type(codec) == wrapper:
        return_list.append( pack(obj[key], wrapper) )

return return_list


list wrapper
------
codecs_list: [dict_wrapper, dict_wrapper, encoder, list_wrapper]

pack(obj, wrapper) ->

return_list = []
for (item, codec) in zip(obj, codecs_list):
    if type(codec) == encoder:
        return_list.append( encoder.serialize(item) )
    
    if type(codec) == wrapper:
        return_list.append( pack(item, wrapper) )

return return_list


deserialize
===========

dict wrapper
------
keys_list: ["foo", "bar", "baz", ..., "a" ]
codecs_list: [encoder, encoder, list_wrapper, dict_wrapper]

unpack(serialized, wrapper) ->

return_dict = new {}

for (blob, key, codec) in zip(serialized, keys_list, codecs_list):
    if type(codec) == encoder:
        return_dict[key] = encoder.decode(blob)

    if type(codec) == wrapper:
        return_dict[key] = unpack(blob, wrapper)

return return_dict


list wrapper
------
codecs_list: [dict_wrapper, dict_wrapper, encoder, list_wrapper]

unpack(serialized, wrapper) ->

return_list = []
for (item, codec) in zip(serialized, codecs_list):
    if type(codec) == encoder:
        return_list.append( encoder.deserialize(item) )
    
    if type(codec) == wrapper:
        return_list.append( unpack(item, wrapper) )

return return_list


How to declare wrappers?
========================

dictWrapper:
    __init__(list_of_tuples = [(key, codec), (key, codec) ... ])

listWrapper
    __init__(list_of_codecs = [codec, codec, codec ... ])

transactionProfile = dictWrapper([
        ("foo", IntEncoder),
        ("bar", IntEncoder),
        ("baz", listWrapper([
                    dictWrapper(
                        [
                            ("x", IntEncoder),
                            ("y", IntEncoder)
                        ]
                    ),
                    dictWrapper(
                        [
                            ("x", IntEncoder),
                            ("y", IntEncoder)
                        ]
                    ),
                    IntEncoder,
                    listWrapper([
                        IntEncoder,
                        dictWrapper([
                            ("a", IntEncoder)
                        ])
                    ])
                ])
        )
])